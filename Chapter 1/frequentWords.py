text = "TCCGGAAAATGTGGCATTCTGGGGGAGTCTGGGGGAGACATTAACCCTGTGGCATTCCGGAAAATCCGGAAAATTTAACCATTTAACCAACATTAACCCACATTAACCCACATTAACCCTCCGGAAAATCCGGAAAATGTGGCATTGTGGCATTCTGGGGGAGTCCGGAAAATCTGGGGGAGTCTGGGGGAGTGTGGCATACATTAACCCTCCGGAAAATCTGGGGGAGTTTAACCATTTAACCATCTGGGGGAGTCTGGGGGAGTCCGGAAAATTTAACCATCCGGAAAATCTGGGGGAGTCCGGAAAATGTGGCATTCTGGGGGAGTCTGGGGGAGTTTAACCATGTGGCATTCTGGGGGAGTCCGGAAAATTTAACCATCCGGAAAAACATTAACCCTCCGGAAAATTTAACCATCCGGAAAATCTGGGGGAGTCCGGAAAATCTGGGGGAGTTTAACCATTTAACCATCCGGAAAATGTGGCATTGTGGCATACATTAACCCTGTGGCATTTTAACCATGTGGCATTGTGGCATTCTGGGGGAGTCTGGGGGAGACATTAACCCTGTGGCATTGTGGCATACATTAACCCTTTAACCATCTGGGGGAGTCCGGAAAAACATTAACCCTCCGGAAAAACATTAACCCTCCGGAAAAACATTAACCCACATTAACCCTGTGGCATTCTGGGGGAGTTTAACCATCTGGGGGAGACATTAACCCTCCGGAAAATCTGGGGGAGACATTAACCCTGTGGCATTTTAACCATTTAACCATCCGGAAAATGTGGCATACATTAACCCTGTGGCATTTTAACCATCCGGAAAATCCGGAAAATTTAACCATCCGGAAAATCCGGAAAATTTAACCAACATTAACCCTCCGGAAAATCCGGAAAATCCGGAAAA"

#Function to create a frequency map of a text string
def FrequencyFind(text, kMers):
    freqMap = {}

    #Creates the frequency map based on the k-mer size given
    for i in range(0, len(text) - kMers):
        searchPat = text[i : i + kMers]
        if not freqMap.get(searchPat):
            freqMap[searchPat] = 1
        else:
            freqMap[searchPat] = freqMap[searchPat] + 1

    return freqMap

freqMap = FrequencyFind(text, 12)

#Prints the greatest pattern frequencies
print(max(freqMap, key = freqMap.get))
