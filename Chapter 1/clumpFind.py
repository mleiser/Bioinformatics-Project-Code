genome = "ATTATATGTACGACGTTCATATACTTCGAAGGTGTAAACTTCATACGTCCAAAATCGAGGCTTAAGGATGGGACCTTACAGAGAGTGAAGTTGATTAGAATCCTCGGCAGGTATTCGGAAGGATACCATAGCGCCAGTCTGTGCTTGTTCGGGTTAACCGGGTAGCCTCTTTGCAGGAACATGAGCTTCACTGGAGCCGGCCGGAGAAGCACCAGATTGACCACCGAGACAAACTTTATAGTAGTTAGTGTAAAACGATGGCTACTCAGCTTTTTAATGTATCTGGTTAGATTTATGCACACAGTGGAACCTAAGGAAGATTCAGTCAGGCAGCTAAGGAGCATCAGAAGCGGCTGTACGCCAGACTACCAACCAGTACTCCAACATGTAAATGGGGACAGAATGTTCGCAAGCGTATGCGCCATCAGCATACCCTGTAATTGACGCCCACATGTATGTTCACGTCTGGACTGCATGACCGGTGACGATTGCCCGGTCCGCCGTCAGGCGGGGGTCGCTGGCTATATGGCCAGTCCGGTGAAGTCTCCCGACCAAACTGAGCAGCGTTTCAGGCGTCCTCATACCTTTGTCGATAGCATAGAAGCCATAGACATAGAAGCCATGTGTGGCAGCTTGAATACGGAGGGAGACAATCAATGCGTGCGGGGTCAATTATCGGCCGGTAATCTCCTTGCGAGCATCATCCGTTATCAAATCCGTGTGTAAACCACATCTGGGGAGCCATAATTGTACCATAACAGACCAGTCGCCACTGTCACGCCCAAATAAATTGATTCTAATAATTTGCGAGGACACGGTGCGAGTGCGAGGACTGTAGCCAGGTACGCTAAGACACTCAATCCCAGGTCATGTTTAGACCAGAGCTGGGAGAATTTAGTGTGGACATTTGGCACGCATTATGTTATGATTTATGATGTATGATGTTCTCTGCACCGTTTGCTTCAAGCAAACCGCTTGTAGGGCCAGACAAGAGGTAACCAATTCGACAGGTGCGTAATGCGAACTATTAGATAATCAAGTATAATGAAGAGCAACTGTAATGAACTTCCTTCGCACCATTATGAGGATGTATTAAAGAAGTCCCCTTTACGGTTCGCGGGCCGTCCCGGGCCGTCCCCCTTATGTGCCGTCTCCACGATAGCGCGTGGACGGTTGCCTACGCTTCCCCTATAATATTCATGCTCAGTTCTAATTTTGGAAGCGCCGTCTTGGTTGGCGTCTTGGTCGTCTTGGTCGAGGCAAGGCACTTCCCATATGTCGGCTGAACAGGGGTATTTCCGCGGGTTGCGCCTAGTGGATTAGTCACTGGAGAACAGATGGAGCATCTCACCGGAAGTGTCAGCAACGTAACTCTTCCCCCCCGTGCCCCGTGTTTTTCGCTCAAAAAATGGCCCGGCTGGATATTCGATTCTGGGGAGAAATGGGACATAAATGAGTCAATAGTCCAAACCCTTGCGAGCGGGCTATATCTTTCAAGAAGAATTACCATACATAATTACCATACCATAGATGACTGCCAGCTTATGCATCCGCCACTCACGCTCTTCAATCTCCGATCCGAGCGCAGGGCAGGGCAATGACTGCAGTATAGGTATGCAACTAGATTCCTTGCCGTTGAATCCAGTCAGCGCCACCAGTACGGACGTTCTATGTGGGGCTACGCGTACTACCCCTTTCGACACCTCAATCGGTTGTTCACGCTCACTGGAAATTGAGATTTCGACGGACGCAGGTAAGGCCATTAAGACCATTACATTAAGACACACACCCTTTATTTTGACGGGAACGTTCCGTGGCGTCTGCGCGGCGCGACCCGTTTCTTGGCGTTTCTTCGTTTCTTGAACCAGCACTCTTCCCTTTCTTCCCTTTCTTCCCTTTCTTCCCTTTCTTCCCTTTCTTCCCTTTCTTCCCTTTCTTCCCTT"
k = 9
L = 24
t = 4

def FreqTable(genome, k):
    freqMap = {}

    #Creates the frequency map based on the k-mer size given
    for i in range(0, len(genome) - k):
        searchPat = genome[i : i + k]
        if not freqMap.get(searchPat):
            freqMap[searchPat] = 1
        else:
            freqMap[searchPat] = freqMap[searchPat] + 1

    return freqMap

#function to find specified clumps
def FindClumps(genome, k, L, t):
    Patterns = []
    n = len(genome)

    #Creates windows of the genome code
    for i in range(0, n - L):
        window = genome[i:i + L]
        freqMap = FreqTable(window, k)

        #Analyzes the windows for specified k-mer clumps
        for j in freqMap:
            if freqMap[j] >= t:
                if freqMap[j] not in Patterns:
                    Patterns.append(j)
    return Patterns

Patterns = FindClumps(genome, k, L, t)
print(Patterns)
